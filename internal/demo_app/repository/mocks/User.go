// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/blac3kman/Innopolis/internal/demo_app/entities"
	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, name, email
func (_m *User) Create(ctx context.Context, name string, email string) (entities.User, error) {
	ret := _m.Called(ctx, name, email)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) entities.User); ok {
		r0 = rf(ctx, name, email)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *User) Delete(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, id
func (_m *User) Read(ctx context.Context, id int64) (entities.User, error) {
	ret := _m.Called(ctx, id)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(context.Context, int64) entities.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmail provides a mock function with given fields: ctx, id, email
func (_m *User) UpdateEmail(ctx context.Context, id int64, email string) (entities.User, error) {
	ret := _m.Called(ctx, id, email)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) entities.User); ok {
		r0 = rf(ctx, id, email)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, id, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
