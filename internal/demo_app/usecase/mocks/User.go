// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	entities "github.com/blac3kman/Innopolis/internal/demo_app/entities"
	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// Create provides a mock function with given fields: name, email
func (_m *User) Create(name string, email string) (entities.User, error) {
	ret := _m.Called(name, email)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(string, string) entities.User); ok {
		r0 = rf(name, email)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *User) Delete(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *User) Get(id int64) (entities.User, error) {
	ret := _m.Called(id)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(int64) entities.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmail provides a mock function with given fields: id, email
func (_m *User) UpdateEmail(id int64, email string) (entities.User, error) {
	ret := _m.Called(id, email)

	var r0 entities.User
	if rf, ok := ret.Get(0).(func(int64, string) entities.User); ok {
		r0 = rf(id, email)
	} else {
		r0 = ret.Get(0).(entities.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(id, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
